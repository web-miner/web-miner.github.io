{"pages":[{"title":"","text":"阿里前端 @弘树。 .contact-icon { display: flex; justify-content: center; } .contact-icon a { margin: 4px 8px; text-decoration: none; color: inherit; font-size: 26px; } .contact-icon a svg { display: none !important; } .icon-github:hover { color: #24292e; } .icon-weibo:hover { color: #e6162d; } .icon-twitter:hover { color: #1ab2e8; } .icon-zhihu:hover { color: #0767c8; } .icon-linkedin:hover { color: #5290bc; } .icon-facebook:hover { color: #4e69a2; } .icon-ins:hover { color: #d10869; }","link":"/about/index.html"}],"posts":[{"title":"WebAssembly 新鲜事儿","text":"本周的 wasm 大新闻莫过于阮老师发的一条 twitter： 厉害了，Windows 2000 被编译成 WebAssembly，可以在浏览器里跑了。https://t.co/CdLH3hB1Ru pic.twitter.com/wAWkuCoUTd&mdash; ruanyf (@ruanyf) 2018年8月21日 体验下来确实很惊艳，大家都开玩笑说终于可以在 Chrome 里打开 Firefox 了，只是需要一点耐心 hmm… 不过，阮老师又一次搞了个大新闻，Windows 虽然底层是有很多 C 代码，但并不像 Linux 开源，既然都拿不到源码又何来被编译成 wasm 之说呢？ 那真相是什么样子呢？作者 Fabrice Bellard 又是何方大神？ Windows 2000 on JSLinux在这个页面底部的 Technical notes 链接里，我们可以找到一些技术细节。原来背后是 Bellard 开发的 JSLinux 这个东西，它是一个用 JavaScript 编写的可以运行在浏览器环境的模拟器，大概可以类比到 vmware/virtualbox。算下来接近 8 个年头了，2011 年时 Bellard 编写了初代版本的 JSLinux，也是用 JavaScript 编写的可以跑 Linux 的首个 PC/x86 的模拟器，复用了 Bellard 另一个牛逼的工具 QEMU 实现 x86 的辅助功能和设备模拟。 之后在 2015 年切换到使用 asm.js 来提升性能，2016 年在开发 riscvemu (一个 RISC-V 模拟器) 后，Bellard 决定使用 emscripten 从 C 代码输出 JavaScript 版本，并且还开发了 VirtIO 9P 文件系统便于使用远程文件系统以及文件导入导出，接下来 Bellard 发现复用 VirtIO 设备到 x86 JS 模拟器很有趣，于是把 JSLinux 的 asm.js 版本的代码转为 C 再通过 emscripten 转回 JavaScript，通过细致的调优之后新的版本比原来手写的 asm.js 版本更快了。 这之后 JSLinux 就不再只局限于 Linux 系统了，开始向 Windows NT 进军了，当前版本的 JSLinux 模拟了缺失的几个 PC 设备（PS/2 键鼠、VGA 等），已经可以运行 Windows NT 了。 说了这么多，那到底真相是什么呢？找到一张图，虽然不是直接相关（《jsmodem - 讓 jslinux 使用網路功能》，讲的是 JSLinux 里模拟 modem 的实现），大体也差不多了： 简单说大约是 JSLinux 跑在浏览器的 JS 引擎之上，提供一层虚拟机，然后加载了 Windows 2000 的系统跑了起来。当然实际细节要复杂得多，如果你打开浏览器控制台，观察一下请求，会发现初始阶段加载的 wasm 其实体积并不大，后面会不断异步拉取 .bin 文件，看起来是基于 Windows 2000 的镜像做了细粒度的拆分，而且在交互上也会发现随着交互的进行，源源不断会阻塞去按需加载新的 .bin 文件回来。 话说回来其实 JSLinux 支持 Windows 2000 是 去年 9 月的事情了，这周突然在社区热闹起来大约是因为大佬 Steven Sinofsky （前微软 Windows 事业部总裁）的 twitter， 加上阮老师应该也是看了下面这条来自 WebAssemblyWeekly 公共账号 的传播。相比去年主要就是模拟器部分开始有了 wasm 的支持，所以得到了大家的关注和 wasm 社区的雀跃。 Window 2000 emulated in WebAssembly https://t.co/l7f8au2Zk5 pic.twitter.com/U9fg3w3ZRh&mdash; WebAssemblyWeekly (@WasmWeekly) 2018年8月21日 Fabrice Bellard 大神接下来简单八一下作者 Fabrice Bellard 大神，前面的介绍里已经多次说到 Fabrice Bellard 大神各种造工具的记录了，这位大神到底什么来头？他还有些什么杰作？知乎上有个问题：《Fabrice Bellard是个什么水平的程序员？》，搬运一下： 作者：Hao Lee 链接：https://www.zhihu.com/question/28388113/answer/150897437 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 确实是奇才， 单是 FFmpeg 和 Qemu 这两项就足以超越绝大部分程序员了。看到他的成就我的第一反应就是这哥们儿能和 Linus Torvalds 拼一下（不一定干得过，企鹅王体型比他大）。Fabrice Bellard 的计算机底层功力极其深厚，对各种细节了如指掌，虚拟机可不是想写就能写的，这需要熟悉CPU、内存、BIOS、磁盘的内部原理，鼠标、键盘、终端等外围设备的工作流程，然后在软件层面模拟出来，想想就复杂。从这一点上他可以被称作天才程序员。另外，他的数学功底也是相当扎实，能发现计算圆周率的新算法并且改进算法的人又可以称作计算机科学家。他一个人几乎涵盖了计算机领域的两大发展路线，属于那种全才型的人物。我等只能仰视，无可企及。 下面，让我们来按照时间顺序看一看大神的人生轨迹： 1972年，天才降生 上大学之前重写了LZSS压缩算法，解压软件速度快体积小 1997年1月20日，他发布了最快速的计算圆周率的算法，此算法是 Bailey-Borwein-Plouffe 公式的变体，前者的时间复杂度是O(n^3)，他给优化成了O(n^2)，使得计算速度提高了43%，这是他在数学领域的成就。此时他仅有25岁，我特么现在还在玩泥巴。 2000年他化名Gérard Lantau，创建了FFmpeg项目，做过多媒体音视频处理的应该都知道这个项目到底有多强大。现在暴风影音、QQ影音、格式工厂，还有YouTube、VLC等都使用了FFmpeg的编解码函数库，不过前三者因为不遵守开源协议已经被FFmpeg挂在官网昭告天下了(官网的页面不知为何下线了，我找了份存档 https://web.archive.org/web/20101214233906/http://ffmpeg.org/shame.html)。FFmpeg易扩展、功能强、速度快、占资源少，支持的音视频格式极其广泛，基本上超越了其他所有同类软件，这是他在多媒体处理领域的巨大成就。 2000-2001年左右，他赢得两次国际混淆C代码大赛(IOCCC)，第一个作品写了个4KB大小的C语言编译器子集 OTCC ，这可以算作是TinyCC的前身；第二个作品写了个475B大小的用于打印已知最大素数的程序，用傅里叶变换做的，膜拜吧。 2002年他发布了TinyGL，这是OpenGL的一个子集实现，体积小速度快，占资源还少，这是他在图像处理领域的成就。 2003年开发了Emacs的一个变种：QEmacs。 2004年8月他在之前OTCC的基础上继续完善，使之具备了能够编译Linux内核的能力，这就是TinyCC的正式版，简称TCC。为了证明TCC的威力，他又写了一个只有138KB的启动加载程序TCCBOOT，可以在15秒内从源代码编译并启动Linux内核。分分钟就写了个编译器加引导器，怎么样，怕不怕，我已经躲在角落瑟瑟发抖了。 2005年，Bellard 发布了 QEMU，这是个爆炸性的项目，现在众多底层开发人员已经离不开它了，相当的强大，操作系统教学领域也多用其作为演示。开发这玩意儿需要非常广泛的底层硬件和操作系统知识，一般人搞不定。QEMU的技术已经被应用于KVM、XEN、VirtualBox等多个虚拟化项目中。他至少领导了QEMU项目4年，这是他在虚拟化领域的成就。同年，他用普通PC和VGA卡设计了一个数字电视系统。 2009年12月31日，他声称打破了圆周率计算的世界纪录，仅用一台普通PC机，耗时116天，算出了圆周率小数点后2.7万亿位，比2009年8月17日由超级计算机算出的世界纪录多了1200亿位 。凭借这个突出的数学贡献，他登上了《科学美国人》法文版。 2011年，他单用JavaScript写了一个PC虚拟机Jslinux 。这个虚拟机仿真了一个32位的x86兼容处理器，一个8259可编程中断控制器，一个8254可编程中断计时器，和一个16450 UART。想玩的来这里：Javascript PC Emulator。我觉得他写这玩意儿的时候头顶已经出现光环飘飘乎羽化而登仙了。 不得不承认，这个世界真的有天才。 wasm 还有哪些惊艳的 demo最近 wasm 1.0 版本的草案 终于发布，wasm 官网 上也挂出了四大主流浏览器已提供 1.0 版本支持的消息。Ending定律也将开始生效。算起来从 2015 年 4 月 WebAssembly 社区工作组 成立到现在，wasm 才 3 岁，除了 Windows 2000，还有哪些惊艳的 wasm 的 demo 呢？ vim.wasm，demo 地址 webDSP，demo 地址 JSC.js，demo 地址 官方坦克大战 demo EpicZenGarden，3D 大作 Autodesk，今年的 Google I/O 2018 大会上还做了 专题分享 JavaScript vs wasm animation，可以直观感受两者的性能对比 GameBoy 模拟器，这有一个口袋妖怪的 rom Funky Karts，demo，这里还有详细的实现介绍 总的来说可以看到由于有众多的 C/C++/Rust 开发的现有游戏可以通过编译到中间语言（IR），继而编译到 wasm，如下图 Lin Clark 在 wasm 系列文章之一 《Creating and working with WebAssembly modules》 中的下图所示，这让移植成本变得相对轻松，也不奇怪看到很多 Rust 的游戏可以转到 wasm 版本。 Lifoff in V8另一条值得关注的与 wasm 有关的是 V8 官方博客的更新：《Liftoff: a new baseline compiler for WebAssembly in V8》。在 V8 6.9 之前，wasm 在 V8 里的运行只能在 TurboFan 编译器上，而 TurboFan 本身是为高性能执行而设计，短板是启动性能（因为要做深入优化，代码生成速度慢），在 JS 的执行时 V8 里有 Ignition 编译器作为基线编译器（baseline compiler）来解决快速启动和内存占用的问题，而在 wasm 里则没有，因此这次引入了一个新的基线编译器 Liftoff 来解决 wasm 的快速启动问题。 通过博客上这张图可以看到，相比 TurboFan，Liftoff 的代码生成效率要高得多，而且博文中介绍到可以在解码和验证函数体的同时不断地执行代码生成，基于 wasm 的流式处理 API，可以使 V8 在通过网络下载 wasm 的同时将 wasm 代码不断编译到机器码，加快启动执行效率。 从后文的图也可以看出性能提升也是相当明显的。 接下来还会有更多的优化，比如目前 Liftoff 还仅支持 Intel 平台 主要覆盖桌面用户，接下来会移植到 arm 和 arm64 以支持移动设备；针对移动设备可用内存更少的情况实现动态的编译层级提升；提升 Liftoff 的代码生成性能以及生成的代码的性能等。 结随着 1.0 草案的落地，四大主流浏览器的支持，今年大概真的可以算 wasm 元年了。浏览器里跑操作系统都已经不是梦，AutoDesk 也可以搬到浏览器里，未来还有什么是不可取代的 B/S 呢？当然另一方面也意味着前端的版图已经越来越广阔，要学的东西更多了，如果你对 wasm 还没有多少了解，不妨从 Lin Clark 的 《A cartoon intro to WebAssembly》 看起（中文翻译版可以参见：https://www.w3ctech.com/topic/2027），浅显易懂，非常推荐。 以上。如有谬误，敬请指正。","link":"/2018/08/24/wasm-news/"},{"title":"【2018.09.01】周游记 - Week 1","text":"本周要点：Babel 正式发布 7.0 版本，CodeMirror 宣布新版本重构计划，React Fire 计划启动。 🗞 新闻联播 Babel 7 Released 在经历了近 2 年、4K 次 commit、超过 50 个预发布版本后，Babel 7 终于正式发布了。这是一个大版本升级，带来了更快的速度、升级工具、JS 配置、配置覆盖、更丰富的配置项可控体积、JSX Fragment 支持、TypeScript 支持、新的提案支持等等。 2014.9.28 Sebastian McKenzie 提交了第一条 6to5(也就是 Babel 的前身) 包的 commit，当时的他 还是一个身在澳洲上学的高中生（如今已经在 Facebook 团队从事前端工程工作，链接里是他个人的成长经历），4 年的时间 Babel 已经毋庸置疑成为今天前端工程化的基础设施，而它的定位也早已不再是一个语法转译工具，发展出一整套周边生态，并且越来越多地参与到 ES 标准的建设中，让前端工程师们真正具备面向未来编程的能力。 CodeMirror 6 CodeMirror 是一个广为人知的运行在浏览器端的开源代码编辑器，如今团队正在重写中，新的版本将会提供更可靠的可用性、触摸屏支持、更现代的界面，同时在特性和性能上不输于现有版本。架构设计 上将基于 contentEditable 来实现，以甩掉历史包袱，同时还会借鉴另一个更年轻的所见即所得的文本编辑器 ProseMirror 的思路。目前还处于原型阶段，同时号召社区的捐献。 基于 JavaScript 的源码编辑器由来已久（作为父集的富文本编辑器更是被很多人誉为天坑：为什么都说富文本编辑器是天坑？），在 WikiPedia 上还专设了一篇文章总结。如今风头正盛的可能要数微软出品的 VS Code 中使用的 Monaco Editor 了，当年初见 [Playground] 就被内置的 VS 中同款 Intellisense 智能提示惊艳到了，除此之外还有 AWS Cloud9 平台 御用 IDE 中内置的 Ace 编辑器，CodeMirror 身处的竞争环境还是相当激烈的，期待这一次会带来脱胎换骨的新体验。 另外一条 来自微软 VS Code 大神微博的八卦是，CodeMirror 的作者在 Github 上看到 Firefox debugger 被提了 PR 正在尝试切换到 monaco 于是悲愤地留言了，“我亲爱的用户你咋说不用就不用了，来看看我要发布的下个大版本很惊艳的说啊喂……”。 Let’s be Transparent Mozilla 发布了 Firefox Public Data Report，这是继两年前开始发布的 Firefox Hardware Report 后的一份面向公众的新的报告，呈现 Firefox 桌面用户如何使用浏览器和 Web 的数据，相比之前的硬件报告增加了用户活跃度以及用户行为方面的统计。 大数据时代数据的重要性不言而喻，浏览器厂商相比前端在数据采集上能力更强，Chrome 在去年宣布了 Chrome 用户体验报告，基于 Google 的 BigQuery 数据仓库开放了更加灵活的体验数据分析平台，方便开发者自己通过 SQL 挖掘有意义的数据洞见。相比之下国内浏览器厂商在开放数据这方面还有很多可以做，帮助开发者更贴近和了解用户，赋能 Web 开发者数据能力一起来提升 Web 体验。 React Fire: Modernizing React DOM React 大佬 Dan Abramov 又开新 issue 了，今年以来 React 团队工作重心放在 React 的基础优化上，随着这部分的工作行将尾声，开始思考 React DOM 下一个大版本将要长什么样子，于是启动一个号称 “React Fire” 计划。目前的计划是撤销过去一些设计上的错误，因为它们带来了无尽的后续的修复以及大量的技术债，同时考虑移除一部分事件系统的抽象，这些历史包袱一直没有动过，也是导致过高的复杂度和打包体积的原因。接下来的目标是让 React 更好地对齐 DOM 是如何工作的，重新检视过去的一些导致问题的有争议性的决定，让 React 更小并且更快。 具体的策略计划上，可以看到很多比较大的改动，应该是会带来一些不向下的兼容的。比如将 onChange 迁移到 onInput，将 className 迁移回 class 等，同时也可能会放弃掉一些对老版本浏览器的兼容性，采取差异化的支持策略，让 React DOM 更现代化。 📖 百家讲坛 Service Worker Caching Strategies Based on Request Types PWA 在我们会使用 Service Worker 设置缓存策略，但并不是所有的资源请求都应该等量齐观，如针对资源如何做最佳的缓存策略？基于 URL 确定请求类型是一种办法，但是会对 URL 或者 mime 类型的文件扩展存在硬编码，除此之外我们还可以通过 Request.destination 来决定请求的类型，实现起来可维护性更好。 Life of a pixel 来自 Google Chromium 团队大神 @巢鹏 的微博推荐，Google 大佬 Steve Kobes 做的 《Life of a pixel》 2018，里面详细介绍了 Chromium 如何将一个 html 文件到渲染到屏幕上，据说是 Chrome 组新人入职的学习资料。 🎤 焦点访谈 What is Flutter 10 分钟的时间，快速了解 Flutter 是怎么来的，背后有些什么故事，相比现有的移动开发技术栈有什么区别，想要上手有哪些建议。 之所以注意到这个视频，是看到内网上关于 Flutter 的文章提及（外网版本：《闲聊 Flutter》）。让我们先从一条 twitter 聊起：Google 工程师 Eric Bidelman 说 一个有趣的事实，CSS Flexbox 使用率已经达到约 82%，而 Grid 的才 1%，我们可以看到 Chrome Platform Status 上的统计，2078 个属性中有 1510 个使用度不足 1%，这是 Web 确立的向下兼容的代价，在 PC 时代随着机器性能逐步过剩问题不大，而在移动为王的时代却会在碎片化的机型和系统下差距天壤之比，Web 开发部署成本低而 Native 性能更好功能特性支持度更全，于是社区开始了各种跨平台技术的探索。百度的吴多益大神以前有过一篇长文总结，信息量很大。从 Web 出发，一个很容易想到的出发点就是对 Webkit 做裁剪，抛弃掉沉重的历史包袱，也就有了 RN 以及后面的 Weex 等技术。 说回 Flutter，视频中 Eric Seidel 就介绍了 Flutter 的起源，他们之前在 Chrome 团队非常努力地针对 Web 的某些部分做一些流畅性的优化，决定尝试下做一个实验，试着打破 web 的兼容性要求，不断地砍掉向下兼容的那些历史包袱，然后通过基准测试对比发现，核心的跑分指标是之前的 20 倍，之后就沿着这个方向不断地演进出了 Flutter。当然发展到今天，Flutter 已经不能算是 web 了，从头构建的自定义的运行时、基于 Skia 的图形引擎、来自 Android 的文本渲染系统、Dart 语言和框架，意味着这已经是一个有别于 web 的全新的跨平台开发技术了。当然 Flutter 前面的路还有很长，也许顺着这条路还会有新的技术冒出来，拭目以待。 🛸 探索·发现 CLI: improved 常见的一些命令行工具的更优秀的替代品，目前自己用过 tldr、ag，相比原生的确是方便更多，关注效率的程序员们值得关注。 Package Dependencies 一个可以可视化展示任何 npm 包的各级依赖的工具。 🛰 天气预报 09.05 - 09.06 React Native EU 2018 09.20 - 09.21 Vue.js London 这次还特邀了 React 大佬 Dan Abramov 😎，不知会碰撞出什么火花 09.20 - 09.21 Google Developer Days China 2018，📍上海 09.29 - 09.30 React Boston","link":"/2018/08/29/2018.09.01/"},{"title":"【2018.09.08】周游记 - Week 2","text":"本周要点：Google Chrome 已经 10 岁啦，Ant Design Pro 2.0 正式发布。 🗞 新闻联播 Google’s Chrome browser is now 10 years old 不知不觉 Chrome 已经走过了 10 年，从 08 年 9 月发布的 第一个版本，到 4 年后越过 IE，一路一骑绝尘，到如今已经毫无疑问是全球最流行的浏览器。而在 Chrome 发展的过程中，努力推进了 Web 标准，也诞生了 V8 JS 引擎，之后引爆了 Node.js、React Native、IoT、Electron、Chrome OS 等技术，在赢得用户的同时也赢得了最广泛的开发者。一起简单回顾下 Chrome 浏览器吧。 漂亮的实力派 Ant Design Pro 2.0 正式发布 在给 V2 版本发起过 PR 的 38 位贡献者帮助下，经历了 600 个 commit，一次整体架构升级后，我们带来了全新的 Ant Design Pro 2.0。在这个版本中我们带来了四个全新的页面、多种布局方式来丰富 pro 的使用场景、脚手架从 roadhog 切换到了 umi2，并且加入了一个炫酷的设置抽屉。 Ant Design Pro 目前毫无疑问已经是企业中后台系统的黄金搭档，在阿里内越来越多的新内部系统中出现的频率也越来越高，将整个中后台系统的体验整体拔高了一个层次，真心要给玉伯团队带来这么优秀的作品点赞，这一次又带来了众多新特性新体验。只是目前还没有看到针对存量项目的一键式升级支持的介绍，作为 1.0 开始就一直在试用的用户，期待能看到更优雅的自动化升级功能。 Staged releases allow you to bring new features to your users quickly, safely and regularly. App 发布中分阶段发布是非常重要的一环，之前 Google Play Store 提供了 Alpha 和 beta 轨道支持面向一小部分天使用户的灰度能力，如今这种灰度能力开放到内部测试轨道和生产轨道上来了，让发布流程更快、更轻松也可控。 Next steps for the Swift Server work group Swift 服务端工作组在本周 try! Swift New York City 大会上宣布，工作组的发展开始进入新的篇章。随着 SwiftNIO 的发布及随后被流行的 Swift web 框架 Kitura 和 Vapor 采用，工作组准备好开始新的计划，将把工作重心放到建立强大而健康的生态系统上，帮助开发者更快捷地找到高质量的库和工作，提升开发和运行 Swift 服务端应用程序的效率。 📖 百家讲坛 危险的 target=”_blank” 与 “opener” 如果你的页面里有跳转第三方打开的 &lt;a target=&quot;_blank&quot;&gt; 标签而没有指定 rel 属性配置，注意了会存在钓鱼攻击的风险😲。 rel 里有三种配置 noopener、noreferrer、nofollow，分别表示新标签页置 opener 对象为 null 以禁止来源页的 window 访问（此外还会影响到你的页面的性能😱）、打开新标签页访问时去除 HTTP Header 中的 Referer 请求头字段、告知搜索引擎爬虫不需要抓取外联页面避免 SEO 权重贡献。不过还需要考虑 noopener 浏览器兼容性问题。 Take A New Look At CSS Shapes CSS Shapes 多年前就在 Chrome 和 Safari 中支持了，而在本周 Firefox 62 版本终于得到了支持，至此仅剩 IE/Edge 还不支持。CSS Shapes 规范允许内容围绕非矩形形状排版，可以帮助我们实现更精致的图文混排效果。CSS Shapes规范Level 1定义了三个新属性：shape-outside、shape-image-threshold、shape-margin，本文介绍了这几个属性的用法和场景，以及借助 Firefox DevTools 如何辅助开发。 Removing jQuery from GitHub.com frontend 7 月底的时候 Github 团队工程师 Mislav Marohnić 在 Twitter 上宣布 Github 网站终于完成了去 jQuery 化。如今又在官方博客上更新了一篇文章更详细地介绍了这一改变背后的前因后果以及具体如何做的，包括增量式解耦、使用自定义元素（Custom Elements）以及 Polyfills 的使用等。 🎤 焦点访谈 本周让我们聚焦 Google 成立 20 周年以及 Chrome 10 周年。 为了庆祝 Chrome 十周岁生日，Google 为内置的 T-Rax 游戏（就是那个断网后的小恐龙暴走小游戏）增加了生日蛋糕元素： 与此同时，Chrome 的这个小恐龙游戏也迎来了 4 岁生日，Google 官方博客也更新了一篇博文，讲诉这个游戏的起源和背后的一些故事。之所以选择恐龙主题，是为了表达在无处不在的 Wi-Fi 存在之前，这是一个回到“史前时代”的剧本。该游戏最初于 2014 年 9 月发布，但最初在某些平台上运行效果不理想，尤其是低端 Android 设备上，于是在 12 月的时候重写了一版。根据 Chrome 用户体验工程师 Edward Jung 的说法，每月桌面和移动设备上玩的次数高达 2.7 亿，这其中显然在数据通信昂贵或不可靠的地区如印度、巴西、印度尼西亚和墨西哥贡献了绝大多数。当然你也可以不用掐网才能玩，直接在地址栏输入 chrome://dino 就可以随时来一盘了~ 此外的另一份生日大礼是 Chrome 69 版本正式发布了，对于开发者而言，支持了 CSS Scroll Snap（以后做轮播图组件更容易了，你也可以阅读 《Practical CSS Scroll Snapping》 了解更多），与之前 webkit 适配支持 iPhone X 的方案类似引入了 Display cutouts (aka notches) 的支持（Android 底下的刘海也可以类似 iPhone X 解决全面屏适配的问题了，基于新出的尚处于草案阶段的 CSS 环境变量模块 标准），支持了新出的尚处于草案阶段的 Web Locks API（MDN 介绍，可以用来解决多个 tab 或者 worker 中的异步并发调用问题），以及 一些其他开发者特性。而对于用户而言，最直观的变化莫过于 UI 界面，将新的 Material Design 设计语言彻底应用到了包括标签栏、汉堡菜单各个角落，整体看起来风格更简洁。 Chrome 官方也更新了一篇博客 《The ‘Capable Web’: A 10 Year Retrospective》，回顾了 Chrome 发展的 10 年历程和对未来的展望。随后 Chrome DevTools 团队也献上一篇 《10 Years of Chrome DevTools》，回顾了 Chrome DevTools 的十年进化历程。 此外本周二（09.04）也是 Google 20 岁的生日，看看雷锋网的回顾 《今天，Google 二十周岁了：它如何改变了自己、互联网和世界？》，当然好奇心日报的这篇 《成立 20 年，Google 倡导的知识民主化现在看好像失败了 | 好奇心商业史》 更具有反思性。 🛸 探索·发现 Time Slicing demo from JSConf Iceland talk 还记得 Dan Abramov 大佬之前在 JSConf Iceland 2018 上分享的 《Beyond React 16》 吗？当时为了演示同步和异步模式下对用户输入的实时渲染更新效果的对比，专门做了一个实时可视化的 demo 来着，现在 Dan 把它放到线上了，你可以亲身体验一下了，顺便 Tips：Shift + / 可以切换出来华丽的 CPU 占用雷达图。 Web Design Museum 欢迎来到 Web 设计博物馆，本馆精心挑选了超过 900 个 web 站点，展示 1995 - 2005 十年间 web 设计的趋势。 50 Popular Python open-source projects on GitHub in 2018 Github 2018 年最流行的 50 个开源 Python 项目，我们粗略做了一下分布统计，可以看出各种命令行工具和应用依然是量最大的，而机器学习相关的工具和库占比占据了第二位： Splash 一个快速、轻量级而灵活的 Swift 版的语法高亮器，可以以命令行方式调用也可以作为包在项目中使用。 worker-dom Google 的 AMPI 项目组又在搞黑科技，让 DOM API 可以跑在 WebWorker 里。可以看看 之前的博客 以及 JSConf US 上的幻灯片。 🛰 天气预报 09.15 美团技术沙龙第44期：千万级日活App的质量保证，📍北京 09.15 @Swift 开发者大会，📍北京 09.16 掘金开发者大会 - 微信小程序专场，📍北京 09.20 - 09.21 Vue.js London，📍伦敦 这次还特邀了 React 大佬 Dan Abramov 😎，不知会碰撞出什么火花 09.20 - 09.21 Google Developer Days China 2018，📍上海 09.23 第七期 杭州 Node Party 技术分享，📍杭州 09.29 - 09.30 React Boston，📍波士顿 10.14 腾讯 IMWebConf 2018 ，📍深圳 10.14 PyCon China 2018 北京站，📍北京 10.18 - 10.20 QCon 2018 上海站，📍上海 10.21 PyCon China 2018 上海站，📍上海 10.27 PyCon China 2018 深圳站，📍深圳 11.04 PyCon China 2018 杭州站，📍杭州 11.16 - 11.19 CNUTCon 全球运维技术大会2018，📍上海 12.07 - 12.08 ArchSummit 全球架构师峰会，📍北京","link":"/2018/09/11/2018.09.08/"},{"title":"【2018.09.15】周游记 - Week 3","text":"本周要点：V8 引擎本周也满 10 岁啦，npm 开始酝酿下一代的包管理器，与此同时 yarn 也不甘落后 推出了 Plug’n’Play 提案。 🗞 新闻联播 继上周 Chrome 10 周岁，这周 V8 团队也在官方微博庆祝 V8 10 周岁了。博文中回顾了 V8 的十年历程中的重要里程碑： 2006 年， Google 聘请了 Lars Bak 为 Chrome 浏览器开发一个全新的 JavaScript 引擎，当时在内部还是一个秘密项目； 2008 年，随着 9 月 2 号 Chrome 的发布，V8 在同一天开源，最初的 第一条 commit 可以追溯到 6 月 30 号；最初，V8 只支持 ia32 和 ARM 指令集，使用 SCons 作为构建系统； 2009 年，引入全新的正则表达式引擎 Irregexp，提升真实场景下的正则表达式性能；加入了 x64 指令集支持；这一年 Node.js 的第一个版本 0.0.1 发布了，嵌入了 V8； 2010 年，V8 引入了一个全新的优化 JIT 编译器 Crankshaft，生成相比之前快 1 倍而且体积减少 30% 的机器码；同年加入了 32 位 MIPS 指令集的支持； 2011 年，发布了新的 增量式垃圾回收器，极大地提升了 web 应用和 HTML5 游戏的交互性能；实现了 ES5 严格模式的支持；将 V8 的构建系统从 SCons 迁移到 GYP；团队也从最初的丹麦迁移到了德国慕尼黑； 2012 年， V8 的基准测试之年；基于 Sunspider 和 Kraken 基准测试集的度量冲刺提升性能；开发了一个新的基准测试集：Octane，刺激了主流 JS 引擎提升运行时性能优化和 JIT 技术的应用； 2013 年，发布 Octane 2.0，加入如 asm.js 场景的用例； 2014 年，将部分主线程的 JIT 编译移到后台，引入了 concurrent compilation（并行编译），减少页面卡顿并显著提升性能；落地了 优化编译器 TurboFan 的初始版本；合作伙伴帮忙实现了 V8 针对 PPC、MIPS64 和 ARM64 指令集的支持；构建系统也跟随 Chromium 的脚步切换到了 GN；源码管理也从 SVN 迁移到了 Git； 2015 年，实现了 code caching and script streaming（代码缓存和流式脚本处理），显著提升了页面加载性能；启动了新的解释器 - Ignition；尝试了 JavaScript 子集化的想法，引入 strong mode 实现更有力的保证和更可预测的性能，但后来发现成本收益比不高；实现了 Idle-time garbage collection 显著降低了垃圾回收卡顿和内存开销；第一个WebAssembly 的原型落地； 2016 年，交付了 ES2015 特性集的收尾工作以及 ES2016 的部分特性；开始推出新的 Ignition + TurboFan 编译器流水线，用来 编译和优化 ES2015 和 ES2016 特性，并在 低端 Android 设备中默认启用 Ignition；启动了 Orinoco 项目，它是一个新的并行垃圾回收器，用来减少主线程垃圾回收耗时；重新聚焦性能优化的方向，由综合性的微基准测试转向 真实环境下的性能度量和优化；将 V8 检查器从 Chromuim 移植到了 V8，从而使 V8 嵌入者可以使用 Chrome DevTools 来调试 V8 中的 JavaScript；WebAssembly 从原型升级到了实验式支持； 2017 年，终于完成了多年的引擎翻修，正式默认启用新的 Ignition 和 TurboFan 流水线，也彻底 移除了旧的 Crankshaft 和 FullCodegen 流水线；启动了新的垃圾回收器 Orinoco v1.0，包括 concurrent marking（并发标记）、concurrent sweeping（并发清除）、parallel scavenging（并行回收）和 parallel compaction（并行压缩）；实现了 JavaScript modules 的支持以及完整的 ES2017 和 ES2018 特性集；交付了 JavaScript 代码覆盖率的原生支持，启动了 Web Tooling Benchmark 度量 V8 的优化如何影响真实世界开发者工具及其生成的 JavaScript 代码的性能； 2018 年，针对年初的 Spectre/Meltdown 漏洞 V8 也交付了应对的 缓解办法；最近则刚刚交付了一个新的针对 WebAssembly 的基线编译器 Liftoff；交付了 BigInt 用于 JavaScript 中的任意精度整数的操作；实现了 在后台线程上编译脚本字节码；以及未完待续…… GitHub Pull Requests in Visual Studio Code VS Code 团队推出了一个公开预览版的扩展 GitHub Pull Requests，可以在 VS Code 中直接 review 和管理 Pull Request，再也不需要在 IDE 和浏览器之间来回切换了。 Next Generation Package Management 提前 npm，关于 node_modules 的吐槽已经层出不穷了，比如下面两张漫画： npm 官方博客更新的这篇文章介绍了他们正在做的一项概念性实现：tink，可以实现几乎免安装的安装器。它是基于你的已有的 package-lock.json 来实现的。有了 tink 你会发现，即使你项目目录下没有 node_modules 目录，也从没有执行过 npm install，你还是可以 require 你的任何依赖。初次运行会需要几秒钟的时间来下载和解压包，但后续的运行会几乎瞬间完成，尽管它仍然会验证你的 package-lock.json 中的依赖包在系统中都存在。 ) Yarn Plug’n’Play: Getting rid of node_modules 与上面的 tink 看起来有些类似，yarn 的这个新提案给出了一个完全可选的替代方案来解决依赖安装到本地的问题，而且还给出了 相关实现的 PR，其中的一些亮点包括 70% 的包安装提速、应用启动速度会更快、yarn 可以准确提醒你在 dependencies 中遗漏了需要列出的包、CI 上的 yarn 安装过程将可以省略等。这个方案已经在 Facebook 内部生产环境中使用了大约 2 周了，目前还没有发现什么问题。因此是时候他们决定向外推出了。 yarn 的这个提案的实现看起来与 tink 确有些类似，只是 node_modules 底下前者放的是 .pnp.js 文件描述包的静态解析表和解析器，而 tink 的方案里则放的是 .package-map.json 文件记录各安装包内文件的 hash 值。那本地找不着要安装的包，实际都去哪儿了呢？可以推断应该都在各自定义的一个集中化的目录下，这样就能实现跨项目的包安装复用，感觉有点像引用了安装在全局的包，只是在解析的过程中又需要更好地处理多版本并存、link 软连接等问题。期待这条路趟出来，相信对于大家的磁盘压力会小得多。 📖 百家讲坛 Chrome DevTools - Debugging Node.js Application Using ndb 从原始的 node debug abc.js 到 node-inspector 再到 node --inspect-brk，Node.js 的调试体验一步步进化，而前两个月，或许你听说了，Chrome 实验室又推出了一个改进的调试体验工具 ndb，相比之前又有了一些新的强大特性：1. 自动探测和附属上子进程；2. 可以在模块被 require 之前放置断点；3. 可以直接在调试器 UI 上编辑文件并保存到本地；4. 默认自动将当前工作目录之外的文件 blackboxes（排除在外）。 Chrome’s new design — a UX perspective 从用户体验视角解读 Chrome 的全新设计。包括搜索优化、标签栏管理、滚动时扩大可视区域、Material Design 等。 Designing With Code 使用代码作为工具参与设计已经不是一件新鲜事了，尤其是 Sketch 的出现后，去年 Airbnb 就推出了 React Sketch.app 工具，试图通过 React 代码作为涉及资产解决涉及与代码的更新同步问题，在 知乎上也引发了大家的广泛关注和讨论，这之后还有网页版的设计工具 Figma，也在 4 月份引入了 将设计转换为 React 代码 的支持。本文作者分享了在做华尔街日报的两个项目中通过编写代码作为设计工具来创建设计的实践。 The Problem with font-display and Reflow 进行性能优化时，决定 Web Font 的加载行为是一项技术活。@font-face规则中新增了一个font-display声明，开发者可以根据 Web Font 的加载时间来决定如何渲染或降级处理。如果你还没用过 font-display，可以先通过 《Controlling Font Performance with font-display》（这里是中文翻译版本）了解一下。而 font-display 使用可能会遇到渲染重排的问题，这篇文章里介绍了原因和解决办法。最简单的方法就是使用 font-display: optional。 Introducing the React Profiler React 16.5 新增了 DevTools profiler 插件的支持，使用 React 实验性 Profiler API 来收集每个被渲染的组件的耗时信息，为在 React 应用中定位性能瓶颈提供帮助。本文介绍了如何使用这个工具以及如何分析诊断相关的输出数据。 👤 大家本周的“大家”，让我们关注 V8 的创始人 Lars Bak。 2000或2001年以前在美国，是Sun的 HotSpot JDK的主力开发之一。 回到丹麦，2002年创立 OOVM。因为他对 Smalltalk 的热爱，OOVM 被写成一个以 Smalltalk 为开发语言的迷你虚拟机，主打各种资源有限嵌入式设备，代码调试、热部署、热替换都很方便。没记错的话当时宣传是最低128K RAM就可以运行。 OOVM 在 2004年被当时 J2ME VM 的主要开发商 Esmertec 收购，后来改名为OSVM，以突出其能够在 bare metal 上运行的特性。 Lars Bak的家是个丹麦的农场，有时候高层开会就跑去他家里开… 2006年因为经济不景气，同时 OSVM 始终没能在市场上取得大的进展（一方面原因是 Smalltalk 还是太小众了），Esmertec 关掉了位于丹麦的 OSVM分支。 Lars Bak 随后加入 Google。这里 Wikipedia上的记载有误，他是在06年而不是04年加入 Google 从事V8开发的。 后来V8和Dart的工作大家都知道了。 作者：rlei 链接：https://www.zhihu.com/question/21918553/answer/19857329 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 大神确实是大神，虚拟机玩得出神入化。《金融时报》当年还为他发过一篇人物特写，摘录其中的一小段： 这个丹麦人首次在加州硅谷引起人们的注意是在1991年，那时他在Sun公司工作，后来成为业界最佳程序员之一。1994 年，他离开Sun，帮助创建了Animorphic系统，该公司后来被Sun收购。再次回到Sun之后，巴克开发了后来成为Java HotSpot（行业标准计算系统之一）的程序。 抛开法律和市场份额不说，技术挑战已经存在了。微软不得不创建比V8更好的东西，巴克说。很多技术观察家很怀疑他们能够在短时间内完成：在测试中，V8处理JavaScript的速度比最常见的IE浏览器要快56倍。我们一开始就是高标准，巴克说。随后谦虚地加了一句：还算成功啦。 即使Chrome漫画没有让巴克迅速成名，他的知名度在这几个月中也迅速增加。越来越多的人想了解Chrome背后的这个人。他宁可写虚拟机器，也不愿意管理奥尔胡斯办公室，而且他宁可做其他所有事情，而不是和记者谈话，可那是游戏的一部分，他接受了。话虽如此，他离Facebook的创建者马克 扎克伯格或比尔盖兹还有很远的距离。我问，在漫画出来之后，你有没有收到粉丝的邮件？他笑了：没。不过我也没有收到抱怨的邮件。 🛸 探索·发现 15 Best Google Fonts by the Numbers (Tips on Usage) 按使用量统计排名的 Top 15 Google Fonts。 3D Scanner 即将要登录 iOS 12 的 AR 3D扫描应用 3D Scanner，能扫描现实的物体再复制出来，甚至还能扫描自己坐在旁边！还可以把扫描出来的 3D 模型用 iMessage 分享给朋友，对方收到以后可以在 AR 场景中查看，相当酷炫，你们看视频感受一下。 您的浏览器不支持HTML5 CodeZen 又一个从源码生成图片的工具，做 PPT 或者 Keynote 神器。不过相比之下似乎还是 Carbon 更强大一些。 Zeu.js 一个用来构建实时数据可视化的 JavaScript 类库，效果很炫酷： 【滚城一团】的 ECharts 训练营 百度 Echarts 的当家花旦 @羡辙 小姐姐推出了免费的 ECharts 学习教程，对数据可视化感兴趣的萌新们可以看过来。 🛰 天气预报 09.20 - 09.21 Vue.js London，📍伦敦 这次还特邀了 React 大佬 Dan Abramov 😎，不知会碰撞出什么火花 09.20 - 09.21 Google Developer Days China 2018，📍上海 09.23 第七期 杭州 Node Party 技术分享，📍杭州 09.29 - 09.30 React Boston，📍波士顿 10.14 腾讯 IMWebConf 2018 ，📍深圳 10.14 PyCon China 2018 北京站，📍北京 10.18 - 10.20 QCon 2018 上海站，📍上海 10.21 PyCon China 2018 上海站，📍上海 10.27 PyCon China 2018 深圳站，📍深圳 11.04 PyCon China 2018 杭州站，📍杭州 11.16 - 11.19 CNUTCon 全球运维技术大会2018，📍上海 12.07 - 12.08 ArchSummit 全球架构师峰会，📍北京","link":"/2018/09/11/2018.09.15/"}],"tags":[{"name":"wasm","slug":"wasm","link":"/tags/wasm/"},{"name":"v8","slug":"v8","link":"/tags/v8/"}],"categories":[{"name":"技术","slug":"技术","link":"/categories/技术/"},{"name":"周刊","slug":"周刊","link":"/categories/周刊/"}]}